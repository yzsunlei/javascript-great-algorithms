/**
算法模式：

1、递归

- 递归是一种解决问题的方法，它解决问题的各个小部分，直到解决最初的大问题。递归通常
涉及函数调用自身。

- 每个递归函数都必须要有边界条件，即一个不再递归调用的条件（停止点），以防止无限递归。

- 递归并不会无限地执行下去；浏览器会抛出错误，也就是所谓的栈溢出错误（stack overflow error）。

- ECMAScript 6有尾调用优化（tail call optimization）。如果函数内最后一个操作是调用函数（就
像示例中加粗的那行），会通过“跳转指令”（jump） 而不是“子程序调用”（subroutine call）来
控制。

2、动态规划

- 动态规划（Dynamic Programming， DP）是一种将复杂问题分解成更小的子问题来解决的优化技术。

- 分而治之方法是把问题分解成相互独立的子问题，然后组合它们的答案，而动态规划则是将问题分解成相互依赖的子问题。

- 能用动态规划解决的一些著名的问题如下：背包问题、最长公共子序列、矩阵链相乘、硬币找零、图的全源最短路径

3、贪心算法

- 贪心算法遵循一种近似解决问题的技术，期盼通过每个阶段的局部最优选择（当前最好的
解），从而达到全局的最优（全局最优解）。

 */